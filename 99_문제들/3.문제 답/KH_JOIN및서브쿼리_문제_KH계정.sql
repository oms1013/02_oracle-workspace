/*
    1. 70년대 생(1970~1979) 중 여자이면서 전씨인 사원의 이름과 주민번호, 부서 명, 직급 조회
*/
-->> 오라클 전용 구문
SELECT EMP_NAME, EMP_NO, DEPT_TITLE, JOB_NAME
FROM EMPLOYEE E, DEPARTMENT D, JOB J
WHERE E.DEPT_CODE = D.DEPT_ID
AND E.JOB_CODE = J.JOB_CODE
AND SUBSTR(EMP_NO, 1, 2) LIKE '7%'
AND SUBSTR(EMP_NO, 8, 1) IN ('2', '4')
AND EMP_NAME LIKE '전%';

-->> ANSI 구문
SELECT EMP_NAME, EMP_NO, DEPT_TITLE, JOB_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN JOB USING(JOB_CODE)
WHERE SUBSTR(EMP_NO, 1, 2) LIKE '7%'
AND SUBSTR(EMP_NO, 8, 1) IN ('2', '4')
AND EMP_NAME LIKE '전%';

/*
    2. 나이 상 가장 막내의 사원 코드, 사원 명, 나이, 부서 명, 직급 명 조회
*/
-->> 오라클 전용 구문
SELECT *
FROM (SELECT EMP_ID,
             EMP_NAME,
             EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(SUBSTR(EMP_NO, 1, 6))) AS "나이",
             DEPT_TITLE,
             JOB_NAME
      FROM EMPLOYEE E, DEPARTMENT D, JOB J
      WHERE E.DEPT_CODE = D.DEPT_ID
      AND E.JOB_CODE = J.JOB_CODE
      ORDER BY 3)
WHERE ROWNUM = 1;

-->> ANSI 구문
SELECT *
FROM (SELECT EMP_ID,
             EMP_NAME,
             EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(SUBSTR(EMP_NO, 1, 6))) AS "나이",
             DEPT_TITLE,
             JOB_NAME
      FROM EMPLOYEE
      JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
      JOIN JOB USING(JOB_CODE)
      ORDER BY 3)
WHERE ROWNUM = 1;

/*
    3. 이름에 ‘형’이 들어가는 사원의 사원 코드, 사원 명, 직급 조회
*/
-->> 오라클 전용 구문
SELECT EMP_ID, EMP_NAME, JOB_NAME
FROM EMPLOYEE E, JOB J
WHERE E.JOB_CODE = J.JOB_CODE
AND EMP_NAME LIKE '%형%';

-->> ANSI 구문
SELECT EMP_ID, EMP_NAME, JOB_NAME
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE)
WHERE EMP_NAME LIKE '%형%';

/*
    4. 부서코드가 D5이거나 D6인 사원의 사원 명, 직급 명, 부서 코드, 부서 명 조회
*/
-->> 오라클 전용 구문
SELECT EMP_NAME, JOB_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE E, DEPARTMENT D, JOB J
WHERE E.DEPT_CODE = D.DEPT_ID
AND E.JOB_CODE = J.JOB_CODE
AND DEPT_CODE IN ('D5', 'D6');

-->> ANSI 구문
SELECT EMP_NAME, JOB_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN JOB USING(JOB_CODE)
WHERE DEPT_CODE IN ('D5', 'D6');

/*
    5. 보너스를 받는 사원의 사원 명, 부서 명, 지역 명 조회
*/
-->> 오라클 전용 구문
SELECT EMP_NAME, BONUS, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE, DEPARTMENT, LOCATION
WHERE DEPT_CODE = DEPT_ID
AND LOCATION_ID = LOCAL_CODE
AND BONUS IS NOT NULL;

-->> ANSI 구문
SELECT EMP_NAME, BONUS, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE)
WHERE BONUS IS NOT NULL;

/*
    6. 사원 명, 직급 명, 부서 명, 지역 명 조회
*/
-->> 오라클 전용 구문
SELECT EMP_NAME, JOB_NAME, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE E, JOB J, DEPARTMENT D, LOCATION L
WHERE E.DEPT_CODE = D.DEPT_ID
AND E.JOB_CODE = J.JOB_CODE
AND D.LOCATION_ID = L.LOCAL_CODE;

-->> ANSI 구문
SELECT EMP_NAME, JOB_NAME, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN JOB USING(JOB_CODE)
JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE);

/*
    7. 한국이나 일본에서 근무 중인 사원의 사원 명, 부서 명, 지역 명, 국가 명 조회
*/
-->> 오라클 전용 구문
SELECT EMP_NAME, DEPT_TITLE, LOCAL_NAME, NATIONAL_NAME
FROM EMPLOYEE, DEPARTMENT, LOCATION L, NATIONAL N
WHERE DEPT_CODE = DEPT_ID
AND LOCATION_ID = LOCAL_CODE
AND L.NATIONAL_CODE = N.NATIONAL_CODE
AND NATIONAL_NAME IN ('한국', '일본');

-->> ANSI 구문
SELECT EMP_NAME, DEPT_TITLE, LOCAL_NAME, NATIONAL_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE)
JOIN NATIONAL USING(NATIONAL_CODE)
WHERE NATIONAL_NAME IN ('한국', '일본');

/*
    8. 한 사원과 같은 부서에서 일하는 사원의 이름 조회
*/
-->> 오라클 전용 구문
SELECT E1.EMP_NAME, E1.DEPT_CODE,
       E2.EMP_NAME
FROM EMPLOYEE E1, EMPLOYEE E2
WHERE E1.DEPT_CODE = E2.DEPT_CODE
AND E2.EMP_NAME != E1.EMP_NAME
ORDER BY 1;

-->> ANSI 구문
SELECT E1.EMP_NAME, E1.DEPT_CODE,
       E2.EMP_NAME
FROM EMPLOYEE E1
JOIN EMPLOYEE E2 ON(E1.DEPT_CODE = E2.DEPT_CODE)
WHERE E2.EMP_NAME != E1.EMP_NAME
ORDER BY 1;

/*
    9. 보너스가 없고 직급 코드가 J4이거나 J7인 사원의 이름, 직급 명, 급여 조회(NVL 이용)
*/
-->> 오라클 전용 구문
SELECT EMP_NAME, JOB_NAME, SALARY
FROM EMPLOYEE E, JOB J
WHERE E.JOB_CODE = J.JOB_CODE
AND BONUS IS NULL
AND E.JOB_CODE IN ('J4', 'J7');

-->> ANSI 구문
SELECT EMP_NAME, JOB_NAME, SALARY
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE)
WHERE BONUS IS NULL
AND JOB_CODE IN ('J4', 'J7');

-- NVL 사용?
SELECT EMP_NAME, JOB_NAME, SALARY, NVL(BONUS, 0)
FROM EMPLOYEE E, JOB J
WHERE E.JOB_CODE = J.JOB_CODE
AND NVL(BONUS, 0) = 0
AND E.JOB_CODE IN ('J4', 'J7');

/*
    10. 보너스 포함한 연봉이 높은 5명의 사번, 이름, 부서 명, 직급, 입사일, 순위 조회
*/
-->> 오라클 전용 구문
SELECT *
FROM (SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, HIRE_DATE,
             RANK() OVER(ORDER BY (SALARY + SALARY * NVL(BONUS, 0)) * 12 DESC) AS "순위"
      FROM EMPLOYEE E, DEPARTMENT D, JOB J
      WHERE DEPT_CODE = DEPT_ID
      AND E.JOB_CODE = J.JOB_CODE)
WHERE 순위 <= 5;

-->> ANSI 구문
SELECT *
FROM (SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, HIRE_DATE,
             RANK() OVER(ORDER BY (SALARY + SALARY * NVL(BONUS, 0)) * 12 DESC) AS "순위"
      FROM EMPLOYEE
      JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
      JOIN JOB USING(JOB_CODE))
WHERE 순위 <= 5;

/*
    11. 부서 별 급여 합계가 전체 급여 총 합의 20%보다 많은 부서의 부서 명, 부서 별 급여 합계 조회
        11-1. JOIN과 HAVING 사용
        11-2. 인라인 뷰 사용
*/
-->> 11-1. JOIN과 HAVING 사용
SELECT DEPT_TITLE, SUM(SALARY) AS "부서별 급여 합계"
FROM DEPARTMENT
LEFT JOIN EMPLOYEE ON (DEPT_CODE = DEPT_ID)
GROUP BY DEPT_TITLE
HAVING SUM(SALARY) > (SELECT SUM(SALARY) AS "전체 급여 총 합"
                      FROM EMPLOYEE) * 0.2;
        
-->> 11-2. 인라인 뷰 사용
SELECT *
FROM (SELECT DEPT_TITLE, SUM(SALARY) AS "부서별 급여 총 합"
      FROM DEPARTMENT
      LEFT JOIN EMPLOYEE ON (DEPT_CODE = DEPT_ID)
      GROUP BY DEPT_TITLE)
WHERE "부서별 급여 총 합" > (SELECT SUM(SALARY) AS "전체 급여 총 합"
                           FROM EMPLOYEE) * 0.2;
                           
/*
    12. 부서 명과 부서 별 급여 합계 조회
*/
-->> 오라클 전용 구문
SELECT DEPT_TITLE, SUM(SALARY)
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE = DEPT_ID(+)
GROUP BY DEPT_TITLE;

-->> ANSI 구문
SELECT DEPT_TITLE, SUM(SALARY)
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
GROUP BY DEPT_TITLE;